'use client'

import styles from './CreateAccountModal.module.scss'
import { ModalPortal } from './ModalPortal'
import { accountService } from '@/services/account.service'
import { confirmDialog } from '@/utils/confirm-dialog.utils'
import { FC, useEffect, useState } from 'react'
import { toast } from 'sonner'

import { DeleteButton } from '@/components/ui/buttons/DeleteButton'
import { IconPicker } from '@/components/ui/modals/IconPicker'
import { UniversalModal } from '@/components/ui/modals/UniversalModal'
import { getAccountFields } from '@/components/ui/modals/accounts/account-fields.config'

import {
  AccountCategoryEnum,
  AccountIconName,
  AccountTypeEnum,
  CurrencyCode,
  IAccount,
  ICreateAccount,
  IUpdateAccount
} from '@/types/account.types'

interface AccountModalProps {
  isOpen: boolean
  onClose: () => void
  onSuccess?: (account?: IAccount) => void
  account?: IAccount
}

export const AccountModal: FC<AccountModalProps> = ({
  isOpen,
  onClose,
  onSuccess,
  account
}) => {
  const [loading, setLoading] = useState(false)
  const [selectedIcon, setSelectedIcon] = useState<AccountIconName>()

  useEffect(() => {
    if (account?.icon) {
      setSelectedIcon(account.icon as AccountIconName)
    }
  }, [account])

  const fields = getAccountFields(account)

  const onSubmitForm = async (data: Record<string, any>) => {
    setLoading(true)
    try {
      if (account) {
        const updateData: IUpdateAccount = {
          name: data.name,
          categoryId: Number(data.categoryId) as AccountCategoryEnum,
          typeId: Number(data.typeId) as AccountTypeEnum,
          currencyCode: data.currencyCode as CurrencyCode,
          currentBalance: Number(data.currentBalance),
          ...(selectedIcon && { icon: selectedIcon })
        }
        const updated = await accountService.update(account.id, updateData)
        toast.success('–°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!')
        onSuccess?.(updated)
        onClose() // ‚úÖ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
      } else {
        const createData: ICreateAccount = {
          name: data.name,
          categoryId: Number(data.categoryId) as AccountCategoryEnum,
          typeId: Number(data.typeId) as AccountTypeEnum,
          currencyCode: data.currencyCode as CurrencyCode,
          currentBalance: Number(data.currentBalance),
          ...(selectedIcon && { icon: selectedIcon })
        }
        const created = await accountService.create(createData)
        toast.success('–°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω üéâ')
        onSuccess?.(created)
        onClose() // ‚úÖ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
      }
    } catch (error: any) {
      toast.error(
        error?.response?.data?.message ||
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—á—ë—Ç–∞ ‚ùå'
      )
    } finally {
      setLoading(false)
    }
  }

  const handleDelete = async () => {
    if (!account) return

    const result = await confirmDialog({
      title: '–í—ã —É–≤–µ—Ä–µ–Ω—ã?',
      text: '–í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç —Å—á—ë—Ç!',
      confirmText: '–î–∞, —É–¥–∞–ª–∏—Ç—å!',
      cancelText: '–û—Ç–º–µ–Ω–∞'
    })

    if (result.isConfirmed) {
      setLoading(true)
      try {
        await accountService.delete(account.id)
        onSuccess?.()
        onClose()
        toast.success('–°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω')
      } finally {
        setLoading(false)
      }
    }
  }

  return (
    <ModalPortal
      isOpen={isOpen}
      onClose={onClose}
    >
      <UniversalModal
        isOpen={isOpen}
        onClose={onClose}
        title={account ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—á–µ—Ç'}
        headerActions={
          account && (
            <DeleteButton
              onClick={handleDelete}
              disabled={loading}
            >
              –£–¥–∞–ª–∏—Ç—å
            </DeleteButton>
          )
        }
        fields={fields}
        onSubmit={onSubmitForm}
        submitText={account ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç'}
        loading={loading}
        size="lg"
      >
        <div style={{ marginBottom: '1rem' }}>
          <div className={styles.pickerTitle}>–ò–∫–æ–Ω–∫–∞ —Å—á–µ—Ç–∞</div>
          <IconPicker
            value={selectedIcon}
            onChange={setSelectedIcon}
          />
        </div>
      </UniversalModal>
    </ModalPortal>
  )
}
